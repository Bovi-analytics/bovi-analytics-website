<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Bovi-Analytics</title>
<link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/</link>
<atom:link href="https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Sat, 02 Nov 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Research paper guidelines</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/master-thesis-guide.html</link>
  <description><![CDATA[ 




<section id="research-paper-guidelines" class="level1">
<h1>Research paper guidelines</h1>
<p>First of all, probably you know but for each of the universities I work with there are some general guidelines</p>
<ul>
<li><p><a href="https://www.ugent.be/bw/en/for-students/curriculum/master-dissertation/writtendissertation">Ghent University Guidelines</a></p></li>
<li><p><a href="https://www.uu.nl/en/university-library/advice-support-to/students/student-theses">Utrecht University</a></p></li>
<li><p><a href="https://gradschool.cornell.edu/academic-progress/thesis-dissertation/">Cornell University</a></p></li>
</ul>
<section id="some-general-methodology-advise" class="level2">
<h2 class="anchored" data-anchor-id="some-general-methodology-advise">Some general methodology advise</h2>
<ul>
<li><p>Start using a notebook (Rmd/Ipynb) to document your methodology. These papers are examples which you can read the code and resulting articles from:</p>
<ul>
<li>Paper by <a href="https://doi.org/10.1371/journal.pone.0264392">Hut et al.&nbsp;2022</a> and its <a href="https://github.com/Bovi-analytics/hut-et-al-2021">methodology on GitHub</a></li>
</ul></li>
<li><p>Standardize your dataset and apply a <a href="https://en.wikipedia.org/wiki/Camel_case">CamelCase</a> naming convention in ENGLISH.</p></li>
<li><p>Read the <a href="https://www.nature.com/articles/sdata201618">FAIR principle paper</a> in Nature and <a href="https://www.go-fair.org/wp-content/uploads/2022/01/FAIRPrinciples_overview.pdf">guidelines</a> and make sure you understand how this is related to your work!</p></li>
<li><p>One of the very popular visualization tools we use is <a href="http://tableau.com" class="uri">http://tableau.com</a>. You can get a version of it using this tutorial (<a href="https://bovi-analytics.com/tutorials/tableau.html" class="uri">https://bovi-analytics.com/tutorials/tableau.html</a> )! Start working with it to create descriptive statistics.</p></li>
<li><p>Create a repository in the <a href="https://github.com/bovi-analytics">Bovi-Analytics Github repository</a> (or ask someone to do it)</p>
<ul>
<li><p>Make it private first (we can decide to make it public when feasible)</p></li>
<li><p>Add a <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.en">CC-BY-NC-ND</a> licence to the repository, this can be done by adding a file named LICENSE (!without extension), which has <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode.txt">this</a> content.</p></li>
<li><p>You can checkout other people’s repositories on <a href="https://github.com/bovi-analytics">our github</a> account to start exploring similar work.</p></li>
</ul></li>
<li><p>Create a final version of the notebook and submit it to the repository. I aim to start grading this as part of the thesis.</p></li>
<li><p>When writing down data from dairy, you probably will have inclusion and exclusion criteria being applied. Try to make this as transparent as possible e.g.&nbsp;by creating a data flow chart. See example <a href="https://www.sciencedirect.com/science/article/pii/S0022030224006398#fig1">here</a>.</p></li>
</ul>
</section>
<section id="some-general-writing-advise" class="level2">
<h2 class="anchored" data-anchor-id="some-general-writing-advise">Some general writing advise</h2>
<ul>
<li><p>Often less is more!</p></li>
<li><p>First of all, use AI tools to aid your writing, not to do the writing for you.</p></li>
<li><p>When you start writing, choose one specific time in which you write. Don’t combine present and past time. My personal preference is the past time.</p></li>
<li><p>Make a clear distinction between the materials&amp;methods and results section. Try to split these 2 clearly.</p></li>
<li><p>Tables have a caption ABOVE the table. Easiest to create a row on top of the table, merge all cells to one and add the title in there.</p>
<ul>
<li></li>
</ul></li>
<li><p>When adding figures in word, use a 1-column, 2-row table (with transparent borders) where you put the figure in the first cell, the figure caption in the second cell, that way they will always move together, and it’s more easy to format.</p></li>
<li><p>Work on your graphics (see <a href="https://bvajournals.onlinelibrary.wiley.com/doi/10.1136/inp.k2166">this</a> article for some guidance). Make sure to make use of the data-to-ink-ratio concept.</p></li>
</ul>


</section>
</section>

 ]]></description>
  <category>best practices</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/master-thesis-guide.html</guid>
  <pubDate>Sat, 02 Nov 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Get started with Github, R and Zenodo</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/github-r-zenodo.html</link>
  <description><![CDATA[ 




<section id="webinar" class="level1">

<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/CAH7_1__2Ss" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>


</section>

 ]]></description>
  <category>GitHub</category>
  <category>R</category>
  <category>Zenodo</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/github-r-zenodo.html</guid>
  <pubDate>Fri, 18 Oct 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Onboarding guide</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/onboarding-guide.html</link>
  <description><![CDATA[ 




<section id="bovi-analytics-onboarding-guide" class="level1">
<h1>Bovi-Analytics onboarding guide</h1>
<p>First of all, welcome!</p>
<p>You might get overwhelmed at the beginning of this journey, but we are there to guide you through!</p>
<section id="getting-started-at-the-bovi-analytics-lab" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-at-the-bovi-analytics-lab">Getting started at the Bovi-Analytics lab</h2>
<p>First, we want to tell the world you are part of the bovi-analytics team so you need to introduce yourself!</p>
<ol type="1">
<li><p>Create a <a href="https://github.com" class="uri">https://github.com</a> profile (if you don’t have one) and request Miel to be added to the Github bovi-analytics team. That way you can have access to all repositories.</p></li>
<li><p>Create your own Quarto file (qmd extension) using R studio or any other text editor and a profile headshot <a href="https://github.com/Bovi-analytics/bovi-analytics-website" class="uri">https://github.com/Bovi-analytics/bovi-analytics-website</a></p>
<ul>
<li><p>Profile qmd file =&gt; <a href="https://github.com/Bovi-analytics/bovi-analytics-website/tree/main/researchers" class="uri">https://github.com/Bovi-analytics/bovi-analytics-website/tree/main/researchers</a></p></li>
<li><p>Lab headshot in png format =&gt; <a href="https://github.com/Bovi-analytics/bovi-analytics-website/tree/main/files/img/headshots" class="uri">https://github.com/Bovi-analytics/bovi-analytics-website/tree/main/files/img/headshots</a></p></li>
</ul></li>
</ol>
<p>You can also do this within GitHub directly nowadays</p>
</section>
<section id="bovi-analytics-team-communication" class="level2">
<h2 class="anchored" data-anchor-id="bovi-analytics-team-communication">Bovi-analytics team communication</h2>
<p>We use different ways to communicate, directly and indirectly. I (Miel) don’t like emails for direct communication. Similarly, I avoid sending files that need editing across teammates. Therefore, I started using several tools:</p>
<ul>
<li><p>Join Lab Teams Workspace</p>
<ul>
<li><p><a href="https://teams.microsoft.com/l/team/19%3ADgjxczayDb7qWX3CjUgADLD-mVOfl9L6HXSh8ivyOXA1%40thread.tacv2/conversations?groupId=28a31af6-2b6c-450f-8daf-4d916cc67f60&amp;tenantId=5d7e4366-1b9b-45cf-8e79-b14b27df46e1">Bovi-Analytics | General | Microsoft Teams</a></p></li>
<li><p>Ask Miel or Enhong for guest access if you do not have a Cornell account</p></li>
</ul>
<p>We typically use this for project &amp; file management (and plan teams meetings of course)</p></li>
<li><p>Join Lab Slack</p>
<ul>
<li>Ask Miel or Enhong for Slack invite (or use this link <a href="https://bovi-analytics.slack.com/" class="uri">https://bovi-analytics.slack.com/</a> )</li>
</ul>
<p>Slack was created before Teams was, and I have been using it for a while now. I prefer it over Teams for direct messaging.</p></li>
</ul>
</section>
<section id="project-management" class="level2">
<h2 class="anchored" data-anchor-id="project-management">Project management</h2>
<p>I have been using several tools in the past, such as JIRA. Right now I’m using the Planner tool within the Office365 suite from Microsoft which is available for all Cornell personel and students via <a href="https://portal.office.com" class="uri">https://portal.office.com</a> . There you can create a planner for a project using e.g.&nbsp;KanBan project management. I like it that you can link it to a Teams project channel.</p>
</section>
<section id="computational-languages" class="level2">
<h2 class="anchored" data-anchor-id="computational-languages">Computational languages</h2>
<p>The team uses multiple languages but the most popular once are:</p>
<ul>
<li><p>R =&gt; for statistics, don’t use it for data intensive tasks!</p>
<ul>
<li>IDE = R-Studio</li>
</ul></li>
<li><p>Python =&gt; data pipelines, compute intensive, AI</p>
<ul>
<li>IDE =&gt; PyCharm</li>
</ul></li>
<li><p>Scala =&gt; scalable parallel processing of data</p>
<ul>
<li>IDE =&gt; IntelliJ IDEA</li>
</ul></li>
</ul>
</section>
<section id="computational-frameworks" class="level2">
<h2 class="anchored" data-anchor-id="computational-frameworks">Computational frameworks</h2>
<p>One of the most popular frameworks to perform ‘big data’ is <a href="https://spark.apache.org" class="uri">https://spark.apache.org</a> . It’s often used by Databricks. At a certain moment you might use it when you want to analyze data that doesn’t fit into your computer’s memory anymore.&nbsp;</p>
</section>
<section id="computational-resources-and-access-to-them" class="level2">
<h2 class="anchored" data-anchor-id="computational-resources-and-access-to-them">Computational resources and access to them</h2>
<ul>
<li><p>Most of what we do computationally uses the Microsoft Azure cloud. You probably won’t need access to it, but it’s nice for you to understand what it is.</p></li>
<li><p>One of the most important cloud-based tools you probably will use is Databricks. The platform allows you to perform data science in the cloud, and especially work together easily across the team.</p>
<ul>
<li><p>Start by trying it using the following guide =&gt; <a href="https://bovi-analytics.com/tutorials/databricks.html">Community Edition of Databricks</a></p></li>
<li><p>Once you get use to this version we will introduce you to the entire platform here (<a href="https://adb-65044996157806.6.azuredatabricks.net/?o=65044996157806&amp;l=en">Databricks Cornell</a>), but it’s nice to start small</p></li>
</ul></li>
</ul>
</section>
<section id="data-visualization" class="level2">
<h2 class="anchored" data-anchor-id="data-visualization">Data visualization</h2>
<p>One of the very popular visualization tools we use is <a href="http://tableau.com" class="uri">http://tableau.com</a>. You can get a version of it using this tutorial (<a href="https://bovi-analytics.com/tutorials/tableau.html" class="uri">https://bovi-analytics.com/tutorials/tableau.html</a> )!</p>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best practices</h2>
<ul>
<li><p>Try to get familiar with the FAIR principles (<a href="https://www.go-fair.org/fair-principles/" class="uri">https://www.go-fair.org/fair-principles/</a> ) as they are an important part of the philosophy of the lab.</p></li>
<li><p>Because of that</p>
<ul>
<li><p>Make sure to get used to work with version control using git. Follow some tutorials, try using it with R-studio, PyCharm, Intellij IDEA</p></li>
<li><p>Within everything you do, start applying a naming convention as soon as possible (See here <a href="https://bovi-analytics.com/tutorials/general-naming-convention.html" class="uri">https://bovi-analytics.com/tutorials/general-naming-convention.html</a> ). Within your programming work, I can imagine you want to follow the guidelines within the programming language.</p></li>
</ul></li>
</ul>


</section>
</section>

 ]]></description>
  <category>best practices</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/onboarding-guide.html</guid>
  <pubDate>Fri, 18 Oct 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Naming convention within Bovi-Analytics Lab for Databricks compute</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/databricks-naming-convention-compute.html</link>
  <description><![CDATA[ 




<section id="tagging-databricks-compute" class="level1">
<h1>Tagging Databricks Compute</h1>
<p>When using compute within Databricks make sure to <strong>tag each compute you create.</strong> This allows to track costs from specific projects.</p>
<p><img src="https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/images/clipboard-2689299655.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>Databricks</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/databricks-naming-convention-compute.html</guid>
  <pubDate>Thu, 02 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to get an academic license for Tableau?</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/tableau.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Tableau is a powerful data visualization and business intelligence software that allows users to connect, visualize, and share data in a way that facilitates understanding and decision-making. It is widely used for creating interactive and shareable dashboards, reports, and charts. Tableau is known for its user-friendly interface and the ability to handle large and complex datasets.</p>
</section>
<section id="academic-license" class="level1">
<h1>Academic license</h1>
<p>Students can ask for an academic license for a one year period using the following <a href="https://www.tableau.com/academic/students#form">link</a>.</p>


</section>

 ]]></description>
  <category>Slack</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/tableau.html</guid>
  <pubDate>Mon, 13 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Get started with Databricks</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/databricks.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Databricks is a unified data analytics and machine learning platform that is designed to simplify and accelerate data-driven decision-making for organizations. It was founded by the creators of Apache Spark, a popular open-source big data processing framework. Databricks builds on Spark and provides an integrated environment for data engineering, data science, and business intelligence.</p>
</section>
<section id="get-started" class="level1">
<h1>Get started</h1>
<p>To sign up for Databricks Community Edition:</p>
<ol type="1">
<li><p>Click ‘Try Databricks’ <a href="https://www.databricks.com/try-databricks#account">here</a>.</p></li>
<li><p>Enter your name, company, email, and title, and click Continue.</p>
<p><img src="https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/images/Login1-01.jpg" class="img-fluid"></p></li>
<li><p><strong>VERY IMPORTANT.</strong> On the Choose a cloud provider dialog, click the “Get started with Community Edition” link. You’ll see a page announcing that an email has been sent to the address you provided.</p>
<p><img src="https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/images/Login2.jpg" class="img-fluid"></p></li>
<li><p>Look for the welcome email and click the link to verify your email address. You are prompted to create your Databricks password.</p></li>
<li><p>When you click <strong>Submit</strong>, you'll be taken to the Databricks Community Edition home page.When you click Submit, you’ll be taken to the Databricks Community Edition home page.</p>
<p><img src="https://docs.databricks.com/en/_images/landing-aws-ce.png" class="img-fluid"></p></li>
</ol>
</section>
<section id="how-to-add-other-people-to-your-workspace" class="level1">
<h1>How to add other people to your workspace</h1>
<ol type="1">
<li><p>Move to your user profile on the upper right corner.</p></li>
<li><p>Click on ‘Admin Settings’</p></li>
<li><p>Click ‘Add user’</p>
<p><img src="https://i.stack.imgur.com/qqv0L.png" class="img-fluid"></p></li>
</ol>


</section>

 ]]></description>
  <category>Databricks</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/databricks.html</guid>
  <pubDate>Mon, 06 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Naming conventions</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/general-naming-convention.html</link>
  <description><![CDATA[ 




<section id="a-comprehensive-guide-to-naming-conventions" class="level1">
<h1>A Comprehensive Guide to Naming Conventions</h1>
<p><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)">Naming conventions</a> are essential for writing clean, readable, and maintainable code. They serve as guidelines for naming variables, functions, classes, and other identifiers in your codebase. Consistently following naming conventions can improve collaboration among developers, reduce confusion, and make it easier to understand your code in the long run. In this tutorial, we will explore the best practices for naming conventions in various programming languages.</p>
<section id="general-principles" class="level2">
<h2 class="anchored" data-anchor-id="general-principles">1. General Principles</h2>
<p>Before diving into language-specific conventions, let’s establish some general principles that apply across most programming languages:</p>
<section id="descriptive-names" class="level3">
<h3 class="anchored" data-anchor-id="descriptive-names">1.1. Descriptive Names</h3>
<p>Choose descriptive names that convey the purpose and meaning of the identifier. Avoid single-letter names or cryptic abbreviations that obscure the purpose of the variable or function.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># What does 'x' represent?</span></span></code></pre></div>
<p><strong>Good Example:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clearly indicates that 'age' represents a person's age.</span></span></code></pre></div>
</section>
<section id="consistency" class="level3">
<h3 class="anchored" data-anchor-id="consistency">1.2. Consistency</h3>
<p>Be consistent in your naming style throughout your codebase. Consistency improves code readability and makes it easier for developers to understand and navigate the code.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getUserData</span>()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// In camelCase</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_user</span>()    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// In snake_case</span></span></code></pre></div>
<p><strong>Good Example:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getUserData</span>()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Both functions in camelCase</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetchUserData</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Both functions in camelCase</span></span></code></pre></div>
</section>
<section id="use-appropriate-length" class="level3">
<h3 class="anchored" data-anchor-id="use-appropriate-length">1.3. Use Appropriate Length</h3>
<p>Strive for names that are neither too long nor too short. Extremely long names can be cumbersome, while very short names may not convey sufficient information.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Not descriptive enough</span></span></code></pre></div>
<p><strong>Good Example:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numberOfStudents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Descriptive but not overly long</span></span></code></pre></div>
</section>
<section id="avoid-reserved-words" class="level3">
<h3 class="anchored" data-anchor-id="avoid-reserved-words">1.4. Avoid Reserved Words</h3>
<p>Avoid using reserved keywords of the programming language as identifiers since they have special meanings and functionalities.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> a reserved keyword <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Python.</span></code></pre></div>
<p><strong>Good Example:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">user_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> Use a different name that <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> a reserved keyword.</span></code></pre></div>
</section>
</section>
<section id="naming-conventions-in-specific-languages" class="level2">
<h2 class="anchored" data-anchor-id="naming-conventions-in-specific-languages">2. Naming Conventions in Specific Languages</h2>
<p>Let’s explore the naming conventions in some popular programming languages:</p>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">2.1. Python</h3>
<p>Python code follows the PEP 8 style guide, which suggests the following conventions:</p>
<ul>
<li>Variables, functions, and module names should be in lowercase, separated by underscores (snake_case).</li>
<li>Constants should be in uppercase, separated by underscores.</li>
<li>Class names should follow the CapWords convention (also known as PascalCase).</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variables and functions</span></span>
<span id="cb9-2">user_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span></span>
<span id="cb9-3">calculate_average_score()</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants</span></span>
<span id="cb9-6">MAX_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class</span></span>
<span id="cb9-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Car:</span>
<span id="cb9-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, make, model):</span>
<span id="cb9-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make</span>
<span id="cb9-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span></code></pre></div>
</section>
<section id="javascript" class="level3">
<h3 class="anchored" data-anchor-id="javascript">2.2. JavaScript</h3>
<p>JavaScript typically follows the following conventions:</p>
<ul>
<li>Variables and functions should be in camelCase.</li>
<li>Constants can be in uppercase with underscores (ALL_CAPS) but are not strictly enforced.</li>
<li>Constructor functions (used for creating objects) should be written with PascalCase.</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variables and functions</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> userName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculateAverageScore</span>() { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span> }</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constants (non-enforced convention)</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> MAX_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor function (class-like)</span></span>
<span id="cb10-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Car</span>(make<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> model) {</span>
<span id="cb10-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">make</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-12">}</span></code></pre></div>
</section>
<section id="java" class="level3">
<h3 class="anchored" data-anchor-id="java">2.3. Java</h3>
<p>Java uses a slightly different naming convention:</p>
<ul>
<li>Variables and functions should be in camelCase.</li>
<li>Constants should be in uppercase with underscores (ALL_CAPS).</li>
<li>Class names should follow the CapWords convention (PascalCase).</li>
</ul>
<p><strong>Examples:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variables and functions</span></span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">String</span> userName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculateAverageScore</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constants</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">final</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> MAX_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Class</span></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Car <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">String</span> make<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">String</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Car</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">String</span> make<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">String</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="special-cases" class="level2">
<h2 class="anchored" data-anchor-id="special-cases">3. Special Cases</h2>
<section id="acronyms-and-abbreviations" class="level3">
<h3 class="anchored" data-anchor-id="acronyms-and-abbreviations">3.1. Acronyms and Abbreviations</h3>
<p>When using acronyms or abbreviations, be consistent with their capitalization and try to avoid ambiguous names.</p>
<p><strong>Examples:</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good</span></span>
<span id="cb12-2">xmlHttpRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...</span>
<span id="cb12-3">userID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad</span></span>
<span id="cb12-6">XMLHTTPRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inconsistent capitalization</span></span>
<span id="cb12-7">uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ambiguous abbreviation</span></span></code></pre></div>
</section>
<section id="scope" class="level3">
<h3 class="anchored" data-anchor-id="scope">3.2. Scope</h3>
<p>Choose names that reflect the variable’s scope. For example, use meaningful prefixes like “g_” for global variables and “m_” for member variables in classes.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">global_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyClass:</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.member_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Adhering to naming conventions is crucial for writing clean and maintainable code. Each programming language has its own conventions, but the general principles of descriptive and consistent naming apply universally. Following these conventions will improve code readability, make it easier for others to collaborate with you, and ensure that your codebase remains maintainable in the long term. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>Best practice</category>
  <category>R</category>
  <category>Scala</category>
  <category>Python</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/general-naming-convention.html</guid>
  <pubDate>Wed, 02 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Python naming convention</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/python-naming-convention.html</link>
  <description><![CDATA[ 




<section id="python-naming-convention" class="level1">
<h1>Python naming convention</h1>
<p>Yes, Python has well-established naming conventions outlined in PEP 8 (Python Enhancement Proposal 8). Following PEP 8 is highly recommended as it improves code readability and consistency across different Python projects. Here are some key recommendations for Python naming conventions:</p>
<section id="variables-and-functions" class="level2">
<h2 class="anchored" data-anchor-id="variables-and-functions">1. Variables and Functions</h2>
<ul>
<li>Use lowercase letters for variable and function names.</li>
<li>Separate words with underscores (snake_case).</li>
<li>Choose descriptive names that convey the purpose of the variable or function.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">user_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_average_score(scores):</span>
<span id="cb1-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="constants" class="level2">
<h2 class="anchored" data-anchor-id="constants">2. Constants</h2>
<ul>
<li>Use uppercase letters for constant names.</li>
<li>Separate words with underscores (UPPER_CASE_WITH_UNDERSCORES).</li>
<li>Note that Python doesn’t have true constants, but this convention indicates that the variable should not be modified.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">MAX_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-2">PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span></span></code></pre></div>
</section>
<section id="class-names" class="level2">
<h2 class="anchored" data-anchor-id="class-names">3. Class Names</h2>
<ul>
<li>Use CamelCase (CapWords) for class names.</li>
<li>Class names should start with an uppercase letter.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Car:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, make, model):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span></code></pre></div>
</section>
<section id="method-names" class="level2">
<h2 class="anchored" data-anchor-id="method-names">4. Method Names</h2>
<ul>
<li>Use lowercase letters for method names.</li>
<li>Separate words with underscores (snake_case).</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Car:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_engine(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="private-variables-and-methods" class="level2">
<h2 class="anchored" data-anchor-id="private-variables-and-methods">5. Private Variables and Methods</h2>
<ul>
<li>Prefix private instance variables and methods with a single underscore <code>_</code>.</li>
<li>Python doesn’t enforce private access, but this is a convention to indicate that the variable/method is intended for internal use.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyClass:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._private_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _private_method(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="modules-and-packages" class="level2">
<h2 class="anchored" data-anchor-id="modules-and-packages">6. Modules and Packages</h2>
<ul>
<li>Use lowercase letters for module names.</li>
<li>Separate words with underscores (snake_case).</li>
<li>Package names should also be lowercase.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># module_name.py</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># package_name/__init__.py</span></span></code></pre></div>
</section>
<section id="constants-in-modules" class="level2">
<h2 class="anchored" data-anchor-id="constants-in-modules">7. Constants in Modules</h2>
<ul>
<li>If a module defines constants, you can use uppercase letters and underscores (UPPER_CASE_WITH_UNDERSCORES) for the constant names.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constants.py</span></span>
<span id="cb7-2">MAX_RETRY_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</section>
<section id="boolean-variables" class="level2">
<h2 class="anchored" data-anchor-id="boolean-variables">8. Boolean Variables</h2>
<ul>
<li>For boolean variables, use names that sound like questions and start with <code>is_</code>, <code>has_</code>, or similar prefixes.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">is_student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb8-2">has_permission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</section>
<section id="avoid-single-character-names" class="level2">
<h2 class="anchored" data-anchor-id="avoid-single-character-names">9. Avoid Single-Character Names</h2>
<ul>
<li>Avoid using single-character names except for loop counters (e.g., <code>i</code>, <code>j</code>, <code>k</code>) and very short-lived variables.</li>
</ul>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<p><strong>Good Example:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">num_attempts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<p>By following these naming conventions, your Python code will be more consistent, readable, and maintainable. PEP 8 is widely adopted in the Python community, so sticking to these conventions will make it easier for others to understand and collaborate on your Python projects. Happy coding in Python!</p>


</section>
</section>

 ]]></description>
  <category>Best practice</category>
  <category>Python</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/python-naming-convention.html</guid>
  <pubDate>Wed, 02 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R naming convention</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/r-naming-convention.html</link>
  <description><![CDATA[ 




<section id="r-naming-convention" class="level1">
<h1>R naming convention</h1>
<p>In R, following consistent naming conventions is crucial for writing clean and readable code. While R doesn’t have strict guidelines like some other languages, there are some commonly adopted conventions that you can follow. Here are some recommendations for R naming conventions:</p>
<section id="object-names" class="level3">
<h3 class="anchored" data-anchor-id="object-names">1. Object Names</h3>
<p>Use descriptive and meaningful names for variables, functions, and objects. Name variables using lowercase letters and separate words with underscores (snake_case).</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">user_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">calculate_average_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(scores) {</span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-5">}</span></code></pre></div>
</section>
<section id="function-names" class="level3">
<h3 class="anchored" data-anchor-id="function-names">2. Function Names</h3>
<p>Functions in R should be named in lowercase using descriptive verbs. If the function name includes multiple words, use underscores to separate them.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">calculate_average_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(scores) {</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb2-3">}</span></code></pre></div>
</section>
<section id="constant-names" class="level3">
<h3 class="anchored" data-anchor-id="constant-names">3. Constant Names</h3>
<p>For constants, use uppercase letters and separate words with underscores. R doesn’t have built-in constants, but you can treat uppercase variables as constants to indicate their unchangeable nature.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">MAX_ATTEMPTS <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-2">PI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span></span></code></pre></div>
</section>
<section id="package-names" class="level3">
<h3 class="anchored" data-anchor-id="package-names">4. Package Names</h3>
<p>Package names should be in lowercase. When creating your own R packages, follow the lowercase convention for package names.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_package"</span>)</span></code></pre></div>
</section>
<section id="logical-names-for-boolean-variables" class="level3">
<h3 class="anchored" data-anchor-id="logical-names-for-boolean-variables">5. Logical Names for Boolean Variables</h3>
<p>When naming boolean variables (logical values), use descriptive names that represent the true/false nature of the variable.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">is_student <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-2">has_permission <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span></code></pre></div>
</section>
<section id="use-consistent-abbreviations" class="level3">
<h3 class="anchored" data-anchor-id="use-consistent-abbreviations">6. Use Consistent Abbreviations</h3>
<p>In R, it is common to use abbreviations for long function names, but try to use consistent and widely understood abbreviations.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">calc_avg_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(scores) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shortened "calculate" to "calc"</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb6-3">}</span></code></pre></div>
</section>
<section id="avoid-reserved-keywords" class="level3">
<h3 class="anchored" data-anchor-id="avoid-reserved-keywords">7. Avoid Reserved Keywords</h3>
<p>Avoid using reserved keywords or function names as variable names, as it can lead to confusion and unexpected behavior.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid using 'mean' as a variable name, as it's a built-in function.</span></span>
<span id="cb7-2">mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span></code></pre></div>
</section>
<section id="avoid-using-dots-in-names" class="level3">
<h3 class="anchored" data-anchor-id="avoid-using-dots-in-names">8. Avoid Using Dots in Names</h3>
<p>While R allows you to use dots in variable names, it’s generally recommended to avoid them as it can cause ambiguity and confusion.</p>
<p><strong>Bad Example:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">my.variable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid using dots in variable names.</span></span></code></pre></div>
</section>
<section id="indentation-and-spacing" class="level3">
<h3 class="anchored" data-anchor-id="indentation-and-spacing">9. Indentation and Spacing</h3>
<p>Maintain consistent indentation and spacing in your code for better readability.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good indentation and spacing</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (condition) {</span>
<span id="cb9-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb9-4">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb9-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb9-6">}</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad indentation and spacing</span></span>
<span id="cb9-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(condition){</span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#...</span></span>
<span id="cb9-11">}<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#...</span></span>
<span id="cb9-13">}</span></code></pre></div>
<p>By adhering to these naming conventions, your R code will be more readable, maintainable, and easier for others to collaborate with. Consistency in naming can make a significant difference in the understandability of your R projects. Happy coding in R!</p>


</section>
</section>

 ]]></description>
  <category>Best practice</category>
  <category>R</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/r-naming-convention.html</guid>
  <pubDate>Wed, 02 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Scala naming convention</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/scala-naming-convention.html</link>
  <description><![CDATA[ 




<section id="scala-naming-convention" class="level1">
<h1>Scala naming convention</h1>
<p>Scala also follows certain naming conventions that help maintain consistency and improve code readability. Here are some recommendations for Scala naming conventions:</p>
<section id="package-names" class="level2">
<h2 class="anchored" data-anchor-id="package-names">1. Package Names</h2>
<p>Package names should be in all lowercase and follow the reverse domain name convention (similar to Java). Use meaningful and descriptive package names that represent the content of the package.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">package</span> com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>example<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>myapp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>models</span></code></pre></div>
</section>
<section id="object-and-class-names" class="level2">
<h2 class="anchored" data-anchor-id="object-and-class-names">2. Object and Class Names</h2>
<p>Class and object names should follow the PascalCase convention, starting with an uppercase letter. Use nouns or noun phrases that describe the entity.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Car <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">object</span> CustomerDatabase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb2-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="trait-names" class="level2">
<h2 class="anchored" data-anchor-id="trait-names">3. Trait Names</h2>
<p>Trait names should also follow the PascalCase convention. Traits represent interfaces or shared behavior, so use descriptive names that convey their purpose.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trait</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Logger</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="variable-and-method-names" class="level2">
<h2 class="anchored" data-anchor-id="variable-and-method-names">4. Variable and Method Names</h2>
<p>Variable and method names should be in camelCase, starting with a lowercase letter. Use descriptive names that convey the purpose of the variable or method.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> userName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">String</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculateAverageScore</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]):</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Double</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="constant-names" class="level2">
<h2 class="anchored" data-anchor-id="constant-names">5. Constant Names</h2>
<p>Constants (immutable values) should be in all uppercase, separated by underscores. Scala doesn’t have true constants like Java’s <code>final</code>, but it is a convention to indicate constant-like values with uppercase names.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> MAX_ATTEMPTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span></span></code></pre></div>
</section>
<section id="type-parameter-names" class="level2">
<h2 class="anchored" data-anchor-id="type-parameter-names">6. Type Parameter Names</h2>
<p>For type parameters, use single, uppercase letters to represent the type.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="enumerations-sealed-traits" class="level2">
<h2 class="anchored" data-anchor-id="enumerations-sealed-traits">7. Enumerations (Sealed Traits)</h2>
<p>Scala doesn’t have a built-in enumeration type like Java, but you can create enumerations using sealed traits and case objects. Name enumeration values in PascalCase.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sealed</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trait</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Color</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">object</span> Red <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">extends</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Color</span></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">object</span> Green <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">extends</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Color</span></span>
<span id="cb7-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">object</span> Blue <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">extends</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Color</span></span></code></pre></div>
</section>
<section id="package-object" class="level2">
<h2 class="anchored" data-anchor-id="package-object">8. Package Object</h2>
<p>If you have utility functions/constants that are closely related to a package, you can use a package object. Name the package object as <code>package.scala</code>.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">package</span> com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>example<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>myapp</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">package</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">object</span> utils <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> DEFAULT_TIMEOUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb8-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formatDate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Date</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">):</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">String</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb8-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="indentation-and-bracing" class="level2">
<h2 class="anchored" data-anchor-id="indentation-and-bracing">9. Indentation and Bracing</h2>
<p>Though not directly related to naming conventions, following consistent indentation and bracing style is important for maintaining readable code.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculateAverageScore</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]):</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Double</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">throw</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">IllegalArgumentException</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empty list of scores."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sum</span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size</span>
<span id="cb9-7">    sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>toDouble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count</span>
<span id="cb9-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>By following these naming conventions, your Scala code will become more readable, and it will be easier for other developers to understand and collaborate on your projects. Consistency in naming also plays a significant role in creating a maintainable codebase. Happy coding in Scala!</p>


</section>
</section>

 ]]></description>
  <category>Best practice</category>
  <category>Scala</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/scala-naming-convention.html</guid>
  <pubDate>Wed, 02 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>What is Slack, and why Slack?</title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/slack.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Slack is a cloud-based collaboration and communication platform designed for teams and businesses. It is primarily used for workplace communication, enabling teams to collaborate, share information, and stay connected in real-time. Slack provides a centralized space where users can send messages, share files, and integrate with various third-party apps and services.It became popular before microsoft introduced Teams, hence we created the Bovi-Analytics workspace.</p>
<section id="key-features-of-slack" class="level2">
<h2 class="anchored" data-anchor-id="key-features-of-slack">Key features of Slack:</h2>
<ol type="1">
<li><p><strong>Channels:</strong> Slack organizes conversations into channels, which can be either public (accessible to all team members) or private (restricted to selected members). This allows teams to keep discussions focused and organized based on different projects, departments, or topics.</p></li>
<li><p><strong>Real-Time Messaging:</strong> Slack offers instant messaging functionality, allowing team members to send and receive messages in real time. This fosters quick and efficient communication within the team.</p></li>
<li><p><strong>File Sharing:</strong> Users can share files and documents directly within Slack, making it easy to collaborate on projects and exchange information without having to switch between different tools.</p></li>
<li><p><strong>Integrations:</strong> Slack integrates with a wide range of third-party apps and services, such as Google Drive, Trello, GitHub, Jira, and more. These integrations enable users to receive updates, notifications, and information from other tools directly within Slack.</p></li>
<li><p><strong>Search and Archive:</strong> Slack retains a searchable archive of all messages and files shared within the platform, making it easy to find and refer back to past conversations and information.</p></li>
<li><p><strong>Notifications:</strong> Slack provides customizable notifications, allowing users to stay informed about important messages, mentions, or activities.</p></li>
<li><p><strong>Bots and Automation:</strong> Slack supports bots and automation, enabling teams to create custom workflows and automate repetitive tasks.</p></li>
<li><p><strong>Voice and Video Calls:</strong> Slack includes voice and video calling capabilities, allowing users to have audio and video meetings directly within the platform.</p></li>
</ol>
<p>Slack has become a popular tool for remote and distributed teams, as it facilitates seamless communication and collaboration across different time zones and locations. It is widely used across various industries and organizations, ranging from startups and small businesses to large enterprises.</p>
</section>
<section id="slack-notifications-to-a-bovi-analytics-channel-in-your-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="slack-notifications-to-a-bovi-analytics-channel-in-your-pipeline">Slack notifications to a Bovi-Analytics channel in your pipeline</h2>
<section id="install-drivers-to-your-notebook" class="level3">
<h3 class="anchored" data-anchor-id="install-drivers-to-your-notebook">Install drivers to your notebook</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt: Send a message to slack channel</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install slack_sdk</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> slack_sdk <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> WebClient</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> slack_sdk.errors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SlackApiError</span></code></pre></div>
</section>
<section id="create-slack-api-client-with-token" class="level3">
<h3 class="anchored" data-anchor-id="create-slack-api-client-with-token">Create slack-api client with token</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WebClient(token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token is in the description of the pushnotifications channel on bovi-analytics'</span>)</span></code></pre></div>
</section>
<section id="create-message-and-send-it" class="level3">
<h3 class="anchored" data-anchor-id="create-message-and-send-it">Create message and send it</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-2">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat_postMessage(</span>
<span id="cb3-3">        channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pushnotifications'</span>,</span>
<span id="cb3-4">        text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rsync succesfully synched gdrive to azure"</span></span>
<span id="cb3-5">    )</span>
<span id="cb3-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> SlackApiError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You will get a SlackApiError if "ok" is False</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> e.response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g., 'invalid_auth', 'channel_not_found'</span></span>
<span id="cb3-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>Slack</category>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/slack.html</guid>
  <pubDate>Wed, 02 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>
            Commonly used tools
        </title>
  <link>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/tools.html</link>
  <description><![CDATA[ 

<div class="grid title-block">
    <div class="course-details-title-block g-col-12 g-col-sm-8 order-2 order-sm-1 text-center text-sm-start">
        
        <div class="course-subtitle">
            <p>Which tools are commony used by collaborators</p>
        </div>
        <div class="course-meta">
            <p></p>
        </div>
    </div>
    <div class="g-col-12 g-col-sm-4 order-1 order-sm-2">
      <div class="grid" style="--bs-columns: 5;">
        <div class="g-col-1 g-col-sm-0"></div>
        <div class="g-col-3 g-col-sm-5"><img src="https://github.com/Bovi-analytics/bovi-analytics-website/files/img/Bovi-Analytics-SmallLogo.png" class="img-fluid"></div>
        <div class="g-col-1 g-col-sm-0"></div>
      </div>
    </div>
</div>


<section id="programming-languages" class="level2">
<h2 class="anchored" data-anchor-id="programming-languages"><strong>Programming languages</strong></h2>
<p>In the early ages of my programming I started programming in VB.NEt, did most of my statistics in SAS for most of my PhD studies. However, as open source became mainstream I have switched (maybe to often). Nowadays, I tend to advice on using several languages. Once you know 1, switching is more easy. And there is always <a href="https://stackoverflow.com/">StackOverflow</a>!</p>
<ul>
<li><p><a href="https://www.r-project.org/other-docs.html" class="uri">[R]</a> when using smaller datasets that need quick and dirty frequentist statistics. Often rendered using <a href="https://rmarkdown.rstudio.com/lesson-10.html">Rmd notebooks</a> and pushed to Github, e.g.</p>
<ul>
<li><a href="https://github.com/Bovi-analytics/Salamone-et-al-2023">Salamone et al</a></li>
</ul></li>
<li><p><a href="https://docs.python.org/3/" class="uri">Python</a> and <a href="https://spark.apache.org/docs/latest/api/python/">PySpark</a> for many of the neural net studies, e.g.</p>
<ul>
<li><a href="https://github.com/Bovi-analytics/van-leerdam-et-al">van Leerdam et al</a></li>
</ul></li>
<li><p><a href="https://docs.scala-lang.org/" class="uri">Scala language</a> when performing more complex data engeneering projects, e.g.</p></li>
</ul>
</section>
<section id="local-processing-when-data-fits-on-prem" class="level2">
<h2 class="anchored" data-anchor-id="local-processing-when-data-fits-on-prem">Local processing (when data fits on-prem)</h2>
<section id="development-environments" class="level3">
<h3 class="anchored" data-anchor-id="development-environments"><strong>Development environments</strong></h3>
<p>For my local processsing, I combine multiple IDE’s. I tried one-size-fits-all approaches such as visual studio but ended up using the following options.</p>
<ul>
<li><p>Python -&gt; <a href="https://www.jetbrains.com/pycharm/">Pycharm</a> -&gt; <a href="https://jupyter.org/" class="uri">Jupyter notebook</a></p></li>
<li><p>[R] -&gt; <a href="https://posit.co/download/rstudio-desktop/" class="uri">R Studio</a></p></li>
<li><p>Scala -&gt; <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a></p></li>
</ul>
</section>
</section>
<section id="clould-processing-when-data-doesnt-fit-on-prem" class="level2">
<h2 class="anchored" data-anchor-id="clould-processing-when-data-doesnt-fit-on-prem">Clould processing (when data doesn’t fit on-prem)</h2>
<section id="data-processing-framework" class="level3">
<h3 class="anchored" data-anchor-id="data-processing-framework"><strong>Data processing framework</strong></h3>
<ul>
<li><p>Python and [R] can be easily used through <a href="https://colab.google/" class="uri">Google Colab</a>.</p></li>
<li><p>Python, [R] and scala can be performed on <a href="https://community.cloud.databricks.com/">Databricks Community for students</a>. Apply for the community edition <a href="https://docs.databricks.com/getting-started/community-edition.html">here</a>, be sure not the click any of the providers (Google, Amazon, Azure) but select the <strong>‘Get started with Community Edition’.</strong></p></li>
<li><p>When in need of larger scale processing power I love to use Apache Spark for distributed analysis and parallel processing using the <a href="https://spark.apache.org/">Apache Spark</a> on <a href="https://azure.microsoft.com/en-us/products/databricks">Azure Databricks</a>.</p></li>
<li><p><a href="https://azure.microsoft.com/nl-nl">Microsoft Azure</a> as current cloud platform.</p></li>
</ul>
</section>
</section>
<section id="others-tools" class="level2">
<h2 class="anchored" data-anchor-id="others-tools"><strong>Others tools</strong></h2>
<ul>
<li><a href="https://github.com/" class="uri">Github</a> as code repository, this website is hosted through github pages.</li>
<li>This website is build using <a href="https://quarto.org/" class="uri">Quarto</a>, a new tool integrated well in R studio and others.</li>
<li>Markdown ( <a href="https://www.markdownguide.org/" class="uri">https://www.markdownguide.org/</a> ).</li>
</ul>


</section>

 ]]></description>
  <guid>https://github.com/Bovi-analytics/bovi-analytics-website/tutorials/tools.html</guid>
  <pubDate>Thu, 15 May 2025 11:16:56 GMT</pubDate>
</item>
</channel>
</rss>
